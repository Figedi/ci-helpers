  
version: 2.1
description: |
  Orb containing commands/executors for building/publishing docker/npm-applications

###
# Specifies required docker environments to
# successfully run the jobs. For this purpose,
# each workflow uses its own executor:
# - CI: For running the tests, a node environment is required
# - CD: For managing the images, a google-sdk environment is required
executors:
  node-executor:
    working_directory: ~/code
    docker:
      - image: circleci/node:10
  node-gcloud-executor:
    working_directory: ~/code
    docker:
      - image: figedi/circleci-node-gcloud
  gcloud-executor:
    working_directory: ~/code
    docker:
      - image: google/cloud-sdk

###
# Commnands are reusable job parts
# the parameters provide a way to customize
# behavior
commands:
  attach_to_code_workspace:
    description: "[ci] Attaches to ~/code"
    steps:
      - attach_workspace:
          at: ~/code

  persist_state_for_next_job:
    parameters: 
      persist_full_state:
        type: boolean 
        default: false
    description: "[ci] Persist job-state for next job"
    steps:
      - when:
          condition: << parameters.persist_full_state >>
          steps:
            - persist_to_workspace:
                root: ~/code
                paths:
                  # should include everything
                  - "."
      - unless:
          condition: << parameters.persist_full_state >>
          steps:
            - persist_to_workspace:
                root: ~/code
                paths:
                  # Contains unpushed "bump" commit
                  - ".git"
                  # Contains image/version/name-data
                  - ".contextrc"
                  # Contains built image
                  - "docker-cache"
                  # Necessary to determine subservice name and version
                  - "package.json"
                  # contains deployment scripts
                  - bin
                  - helm
                  # Necessary to run tests
                  - "docker-compose.ci.yml"
                  - "development.env"
      
  persist_full_state_for_next_job:
    description: "[ci] Persist full job-state for next job"
    steps:
      - persist_to_workspace:
          root: ~/code
          paths:
            # should include everything
            - "."
  setup_npm_access:
    description: "[npm] Command for setting up npm Access"
    parameters:
      npm_registry:
        type: string
        default: registry.npmjs.org
      npm_registry_token:
        type: string
        default: ${NPM_REGISTRY_TOKEN}
    steps:
      - run:
          name: "[npm] Authenticate npm"
          command: |
            npm set registry https://<< parameters.npm_registry >>
            echo "//<< parameters.npm_registry >>/:_authToken=<< parameters.npm_registry_token >>" > ~/.npmrc
  download_ci_toolkit:
    description: "[ci|cd] Download ci-toolkit"
    parameters:
      ci_toolkit_url:
        type: string
    steps:
      - run:
          name: "[ci|cd] Download ci-toolkit"
          command: |
            mkdir -p ~/helpers
            if [ -f "~/helpers/ci-toolkit" ];
              then
                echo "CI-toolkit already exists, will skip downloading it"
              else 
                curl -o ~/helpers/ci-toolkit << parameters.ci_toolkit_url >>
                chmod u+rwx ~/helpers/ci-toolkit
              fi

  setup_github_access:
    description: "[git] Command for setting up Github Access"
    parameters:
      email:
        type: string
        default: "kaminski.felix@gmail.com"
      user_name:
        type: string
        default: "Kaminskobot"
    steps:
      - run:
          name: "[git] Add Github to known hosts"
          command: |
            mkdir -p ~/.ssh
            touch ~/.ssh/known_hosts
            ssh-keygen -F github.com || ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: "[git] Configure Github User"
          # Email and UserName of this command specify
          # how commits are displayed in the GH repo
          command: |
            git config --global user.email "<< parameters.email >>"
            git config --global user.name "<< parameters.user_name >>"

  setup_google_cloud_access:
    description: "[gcloud] Command for setting up Google Cloud Access"
    parameters:
      target_cluster:
        type: string
        default: ""
      credentials:
        type: string
      project:
        type: string
      compute_zone:
        type: string
    steps:
      - run:
          name: "[gcloud] Read GCP credentials"
          command: |
            echo "<< parameters.credentials >>" > ~/gcp-key.json
            gcloud auth activate-service-account --key-file ~/gcp-key.json
      - run:
          name: "[gcloud] Set project and compute zone"
          command: |
            gcloud --quiet config set project << parameters.project >>
            gcloud --quiet config set compute/zone << parameters.compute_zone >>
      - run:
          name: "[docker] Authenticate docker with gcloud"
          command: gcloud auth configure-docker -q
      - when:
          condition: << parameters.target_cluster >>
          steps:
            - run:
                name: "[gcloud] Connect to GKE cluster"
                command: |
                  gcloud --quiet container clusters get-credentials << parameters.target_cluster >>

  run_tests_w_docker:
    description: "[app] Run << parameters.command >> tests w/ docker/docker-compose"
    parameters:
      command:
        type: string
        default: "/wait && yarn db:migrate && yarn features"
      check_for_npm_script:
        type: string 
        default: features
      working_directory:
        type: string
        default: "."
    steps:
      - run:
          name: "[app] Run << parameters.command >> tests w/ docker/docker-compose"
          # circleci has no support for conditional skipping (just failing. thus the pre-check of npm-commands is inlined and duplicated)
          command: |
            cd << parameters.working_directory >>
            HAS_NPM_COMMAND=$(cat package.json | grep "\"<< parameters.check_for_npm_script >>\":") || true
            if [ -z "${HAS_NPM_COMMAND}" ];
              then
                echo "Skipping docker-compose tests for command << parameters.command >>. Reason: Cannot be found in package.json";
              else 
                if [ -f "docker-compose.ci.yml" ];
                  then
                    EXIT_CODE=0 && docker-compose -f docker-compose.ci.yml run -e CI="${CI}" --entrypoint 'sh -c "<< parameters.command >>"' app || EXIT_CODE=$?
                    exit $EXIT_CODE
                  else 
                    env | sed -n '/^GITHUB_PRIVATE_KEY/,/^-----END RSA PRIVATE KEY-----/!p' >> .docker.env
                    docker run --entrypoint="" --env-file=.docker.env ${IMAGE_NAME}:${CIRCLE_SHA1} /bin/sh -c "<< parameters.command >>";
                    rm .docker.env
                  fi
              fi

  run_command_in_docker_container:
    description: "[app] Run command '<< parameters.command >>' in docker-container"
    parameters:
      command:
        type: string
        default: "yarn lint"
      check_for_npm_script:
        type: string 
        default: features
      working_directory:
        type: string
        default: "."
    steps:
      - run:
          name: "[app] Run command '<< parameters.command >>' in docker-container"
          # circleci has no support for conditional skipping (just failing. thus the pre-check of npm-commands is inlined and duplicated)
          command: |
            cd << parameters.working_directory >>
            HAS_NPM_COMMAND=$(cat package.json | grep "\"<< parameters.check_for_npm_script >>\":") || true
            if [ -z "${HAS_NPM_COMMAND}" ];
              then
                echo "Skipping command << parameters.command >> in docker-container. Reason: Cannot be found in package.json";
              else 
                docker run --entrypoint="" ${IMAGE_NAME}:${CIRCLE_SHA1} /bin/sh -c "<< parameters.command >>";
              fi

  build_docker_container:
    description: "[docker] Build application"
    parameters:
      working_directory:
        type: string
        default: "."
      npm_registry:
        type: string
        default: registry.npmjs.org
      npm_registry_token:
        type: string
        default: ${NPM_REGISTRY_TOKEN}
    steps:
      - run:
          name: "[docker] Build application"
          command: |
            cd << parameters.working_directory >>
            docker build --build-arg NPM_REGISTRY_TOKEN=<< parameters.npm_registry_token >> --build-arg CI=$CI --build-arg NPM_REGISTRY=<< parameters.npm_registry >> .
            BUILDER_ID=$(docker images --filter label=build=builder -q)
            RELEASE_ID=$(docker images --filter label=build=release -q)
            # image for ci
            if [ -z "$BUILDER_ID" ]; then
              echo "Missing builder image exiting...."; exit 1;
            fi
            docker image tag "${BUILDER_ID}" "${IMAGE_NAME}:${CIRCLE_SHA1}-builder"
            # image for prod
            if [ -z "$RELEASE_ID" ]; then 
              echo "Missing release image skipping tagging.."; 
            else
              docker image tag "${RELEASE_ID}" "${IMAGE_NAME}:${CIRCLE_SHA1}-release"
            fi
            
  persist_docker_image_locally:
    description: "[ci] Save docker image locally"
    steps:
      - run:
          name: "[ci] Save docker image locally"
          command: |
            mkdir -p docker-cache
            RELEASE_ID=$(docker images --filter label=build=release -q)
            docker save "${IMAGE_NAME}:${CIRCLE_SHA1}-builder" | gzip -c > docker-cache/${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1}-builder.tar.gz
            if [ ! -z "$RELEASE_ID" ]; then
              docker save "${IMAGE_NAME}:${CIRCLE_SHA1}-release" | gzip -c > docker-cache/${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1}-release.tar.gz
            fi
           
  persist_bash_env_locally:
    description: "[ci] Save bash-env to disk"
    steps:
    - run:
        name: "[ci] Save bash-env to disk"
        command: cat $BASH_ENV >> .contextrc

  restore_docker_image:
    description: "[ci] Restore docker-image"
    parameters: 
      image: 
        type: string
        default: "builder"
    steps:
    - run:
        name: "[ci] Restore docker-image"
        command: |
          DOCKER_IMAGE_FILENAME=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1}-<< parameters.image >>.tar.gz
          if [ ! -f "docker-cache/$DOCKER_IMAGE_FILENAME" ]; then
            echo "Missing << parameters.image >> image tar file, exiting....."; exit 1;
          fi
          docker load --input docker-cache/$DOCKER_IMAGE_FILENAME
          docker image tag ${IMAGE_NAME}:${CIRCLE_SHA1}-<< parameters.image >> "${IMAGE_NAME}:${CIRCLE_SHA1}"
          docker image tag ${IMAGE_NAME}:${CIRCLE_SHA1}-<< parameters.image >> "${IMAGE_NAME}:${BUILD_VERSION}"
          docker image tag ${IMAGE_NAME}:${CIRCLE_SHA1}-<< parameters.image >> "${IMAGE_NAME}:latest"
          rm -rf docker-cache
  restore_bash_env:
    description: "[ci] Restore bash-env"
    steps:
    - run:
        name: "[ci] Restore bash-env"
        command: |
          cat .contextrc > $BASH_ENV
          rm .contextrc

  determine_image_name:
    description: "[ci] Determine image name"
    parameters: 
      working_directory:
        type: string
        default: "."
      gcp_project:
        type: string
        default: ${GCP_PROJECT}
    steps:
      - run:
          name: "[ci] Determine image name"
          command: |
            cd << parameters.working_directory >>
            SERVICE_NAME=${CIRCLE_PROJECT_REPONAME}
            BUILD_VERSION=v$(node -e "console.log(require('./package.json').version)")
            IMAGE_NAME=eu.gcr.io/<< parameters.gcp_project >>/${SERVICE_NAME}
            echo "export BUILD_VERSION=${BUILD_VERSION}" >> $BASH_ENV
            echo "export IMAGE_NAME=${IMAGE_NAME}" >> $BASH_ENV
            echo "Building image ${IMAGE_NAME}:${BUILD_VERSION}"
  
  bump_version:
    parameters:
      working_directory:
        type: string
        default: "."
      tag_prefix:
        type: string
        default: v
      ticket_pattern:
        type: string
        default: FGD
      extra_commit_message:
        type: string
        default: ""
    description: "[app] Bump version"
    steps:
      - run:
          name: "[app] Download & execute ci-toolkit 'bump'"
          command: |
            cd << parameters.working_directory >>
            ~/helpers/ci-toolkit bump . "<< parameters.tag_prefix >>" "<< parameters.ticket_pattern >>" "<< parameters.extra_commit_message >>"

  extract_app_from_docker_image:
    parameters:
      working_directory:
        type: string
        default: "."
    description: "[ci] Extract touched files from docker image to make them pushable"
    steps:
    - run:
        name: "[ci] Extract touched files from docker image to make them pushable"
        command: |
          cd << parameters.working_directory >>
          docker run --name temp-copy-container --entrypoint /bin/true ${IMAGE_NAME}
          docker cp temp-copy-container:/opt/app ~/tmp_artifacts
          # todo: this ignores .npmignore, should we really do that? :s
          rsync -r --exclude '.*' --exclude node_modules ~/tmp_artifacts/ .
          rm -rf node_modules ~/tmp_artifacts
          docker rm temp-copy-container

  push_container_to_registry:
    description: "[docker] Push image to gcr.io"
    steps:
      - run:
          name: "[docker] Push image to gcr.io"
          command: |
            docker push ${IMAGE_NAME}:${CIRCLE_SHA1}
            docker push ${IMAGE_NAME}:${BUILD_VERSION}
            docker push ${IMAGE_NAME}:latest

  push_repo_changes_to_git:
    parameters:
      stash_before_pull:
        type: boolean
        default: false
    description: "[git] Push changes from version bump and CHANGELOG update"
    steps:
      - when:
          condition: << parameters.stash_before_pull >>
          steps:
            - run:
                # Whenever the working_directory is not restored in full, alot of files are actually removed
                # This flag stashes thoses changes, so we can pull
                name: "[git] Stash intermediate, uncommitted changes"
                command: git stash
      - run:
          # Pushes the project to github with a predefined token (see 1password)
          name: "[git] Push changes from version bump and CHANGELOG update"
          command: |
            git pull --rebase origin ${CIRCLE_BRANCH}
            git push --follow-tags origin ${CIRCLE_BRANCH}
  
  push_package_to_npm:
    parameters:
      working_directory:
        type: string
        default: "."
    description: "[npm] Push package to npm registry"
    steps:
    - run:
        name: "[npm] Push package to npm registry"
        command: |
          cd << parameters.working_directory >>
          ~/helpers/ci-toolkit npm-publish .

  install_helm:
    description: "[cd] Install Helm"
    parameters:
      sops_kms_ids:
        type: string
    steps:
      - run:
          name: "[cd] Install Helm"
          command: |
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
            export HELM_HOME=/home/circleci/.helm 
            echo "export HELM_HOME=${HELM_HOME}" >> $BASH_ENV
            helm init --client-only
      - run: 
          name: "[cd] Install sops & helm secrets"
          command: |
            wget https://github.com/mozilla/sops/releases/download/3.4.0/sops-3.4.0.linux
            chmod +x sops-3.4.0.linux
            sudo mv sops-3.4.0.linux /usr/local/bin/sops
            echo "export SOPS_GCP_KMS_IDS="<< parameters.sops_kms_ids >>"" >> $BASH_ENV
            echo "export GOOGLE_APPLICATION_CREDENTIALS=~/gcp-key.json" >> $BASH_ENV
            helm plugin install https://github.com/futuresimple/helm-secrets 

  deploy_with_script:
    description: "[cd] Deploy with helm chart"
    parameters:
      working_directory:
        type: string
        default: "."
      target_namespace:
        type: string
        default: "dev"
      post_to_slack:
        type: boolean
        default: false
      slack_channel_id:
        type: string
        default: ""
    steps:
      - when:
          condition: << parameters.post_to_slack >>
          steps:
            - run: 
                name: '[cd] Getting currently deployed version'
                command: |
                  PREV_VERSION=$(~/helpers/ci-toolkit current-deployed-version << parameters.target_namespace >> ${CIRCLE_PROJECT_REPONAME})
                  echo "export PREV_VERSION=${PREV_VERSION}" >> $BASH_ENV
      - run:
          name: "[cd] Deploy with helm chart"
          command: |              
            cd << parameters.working_directory >>
            if [ -f "./bin/deploy" ];
              then
                ./bin/deploy << parameters.target_namespace >>
              else 
                echo "Could not find deployment script, is the project correctly configured?"
                circleci-agent step halt
              fi
      - when:
          condition: << parameters.post_to_slack >>
          steps:
            - run: 
                name: '[cd] Posting deployment notice to slack'
                command: |
                  ~/helpers/ci-toolkit post-to-slack << parameters.slack_channel_id >> ${PREV_VERSION} ${BUILD_VERSION} << parameters.target_namespace >> ${CIRCLE_USERNAME} ${CIRCLE_BUILD_NUM}

jobs:
  checkout_bump_and_build:
    parameters:
      working_directory:
        type: string 
        default: "."
      tag_prefix:
        type: string 
        default: "v"
      persist_full_state: 
        type: boolean
        default: false
      extra_commit_message: 
        type: string
        default: ""
      ticket_pattern: 
        type: string
        default: "FGD"
      ci_toolkit_url: 
        type: string
        default: ${CI_TOOLKIT_URL}
      npm_registry:
        type: string
        default: registry.npmjs.org
      npm_registry_token:
        type: string
        default: ${NPM_REGISTRY_TOKEN}
    executor: node-gcloud-executor
    steps:
      - checkout
      - setup_remote_docker
      - setup_github_access
      - setup_npm_access:
          npm_registry: << parameters.npm_registry >>
          npm_registry_token: << parameters.npm_registry_token >>
      - download_ci_toolkit:
          ci_toolkit_url: << parameters.ci_toolkit_url >>
      - bump_version:
          working_directory: << parameters.working_directory >>
          tag_prefix: << parameters.tag_prefix >>
          extra_commit_message: << parameters.extra_commit_message >>
          ticket_pattern: << parameters.ticket_pattern >>
      - determine_image_name:
          working_directory: << parameters.working_directory >>
      - build_docker_container:
          working_directory: << parameters.working_directory >>
          npm_registry: << parameters.npm_registry >>
          npm_registry_token: << parameters.npm_registry_token >>
      - persist_docker_image_locally
      - persist_bash_env_locally
      - persist_state_for_next_job:
          persist_full_state: << parameters.persist_full_state >>

  lint:
    executor: node-executor
    parameters:
      working_directory:
        type: string 
        default: "."
    steps:
      - attach_to_code_workspace
      - setup_remote_docker
      - restore_bash_env
      - restore_docker_image:
          image: builder
      - run_command_in_docker_container:
          working_directory: << parameters.working_directory >>
          command: "yarn lint"
          check_for_npm_script: lint

  specs:
    executor: node-gcloud-executor
    parameters:
      working_directory:
        type: string 
        default: "."
      command:
        type: string 
        default: "/wait && yarn db:migrate && yarn specs"
      check_for_npm_script:
        type: string 
        default: specs
      gcp_compute_zone:
        type: string 
        default: ${GCP_COMPUTE_ZONE}
      gcp_project:
        type: string 
        default: ${GCP_PROJECT}
      gcp_svc_account:
        type: string 
        default: ${GCP_SERVICE_ACCOUNT_CREDENTIALS}
    steps:
      - attach_to_code_workspace
      - setup_remote_docker
      - restore_bash_env
      - restore_docker_image:
          image: builder
      - setup_google_cloud_access:
          credentials: << parameters.gcp_svc_account >>
          project: << parameters.gcp_project >>
          compute_zone: << parameters.gcp_compute_zone >>
      - run_tests_w_docker:
          working_directory: << parameters.working_directory >>
          command: << parameters.command >>
          check_for_npm_script: << parameters.check_for_npm_script >>

  features:
    executor: node-gcloud-executor
    parameters:
      working_directory:
        type: string 
        default: "."
      command:
        type: string 
        default: "/wait && yarn db:migrate && yarn features"
      check_for_npm_script:
        type: string 
        default: features
      gcp_compute_zone:
        type: string 
        default: ${GCP_COMPUTE_ZONE}
      gcp_project:
        type: string 
        default: ${GCP_PROJECT}
      gcp_svc_account:
        type: string 
        default: ${GCP_SERVICE_ACCOUNT_CREDENTIALS}
    steps:
      - attach_to_code_workspace
      - setup_remote_docker
      - restore_bash_env
      - restore_docker_image:
          image: builder
      - setup_google_cloud_access:
          credentials: << parameters.gcp_svc_account >>
          project: << parameters.gcp_project >>
          compute_zone: << parameters.gcp_compute_zone >>
      - run_tests_w_docker:
          working_directory: << parameters.working_directory >>
          command: << parameters.command >>
          check_for_npm_script: << parameters.check_for_npm_script >>

  push_to_github:
    executor: node-executor
    parameters:
      stash_before_pull:
        type: boolean 
        default: false
    steps:
      - attach_to_code_workspace
      - setup_github_access
      - push_repo_changes_to_git:
          stash_before_pull: << parameters.stash_before_pull >>

  push_to_docker:
    parameters:
      image:
        type: string
        default: release
      gcp_compute_zone:
        type: string 
        default: ${GCP_COMPUTE_ZONE}
      gcp_project:
        type: string 
        default: ${GCP_PROJECT}
      gcp_svc_account:
        type: string 
        default: ${GCP_SERVICE_ACCOUNT_CREDENTIALS}
    executor: node-gcloud-executor
    steps:
      - attach_to_code_workspace
      - setup_remote_docker
      - restore_bash_env
      - restore_docker_image:
          image: << parameters.image >>
      - setup_google_cloud_access:
          credentials: << parameters.gcp_svc_account >>
          project: << parameters.gcp_project >>
          compute_zone: << parameters.gcp_compute_zone >>
      - push_container_to_registry

  push_to_npm:
    executor: node-gcloud-executor
    parameters:
      working_directory:
        type: string 
        default: "."
      ci_toolkit_url: 
        type: string
        default: ${CI_TOOLKIT_URL}
      image:
        type: string
        default: release
      npm_registry_token:
        type: string
        default: ${NPM_REGISTRY_TOKEN}
    steps:
      - attach_to_code_workspace
      - setup_remote_docker
      - restore_bash_env
      - restore_docker_image:
          image: << parameters.image >>
      - setup_npm_access:
          npm_registry_token: << parameters.npm_registry_token >>
      - download_ci_toolkit:
          ci_toolkit_url: << parameters.ci_toolkit_url >>
      - extract_app_from_docker_image:
          working_directory: << parameters.working_directory >>
      - push_package_to_npm:
          working_directory: << parameters.working_directory >>

  gke_deploy:
    executor: node-gcloud-executor
    parameters:
      target_namespace:
        type: string
        default: "dev"
      working_directory:
        type: string 
        default: "."
      post_to_slack:
        type: boolean 
        default: false
      slack_channel_id:
        type: string 
        default: ""
      ci_toolkit_url: 
        type: string
        default: ${CI_TOOLKIT_URL}
      npm_registry:
        type: string
        default: registry.npmjs.org
      npm_registry_token:
        type: string
        default: ${NPM_REGISTRY_TOKEN}
      gcp_target_cluster:
        type: string 
        default: ${GCP_TARGET_CLUSTER}
      gcp_compute_zone:
        type: string 
        default: ${GCP_COMPUTE_ZONE}
      gcp_project:
        type: string 
        default: ${GCP_PROJECT}
      gcp_svc_account:
        type: string 
        default: ${GCP_SERVICE_ACCOUNT_CREDENTIALS}
      sops_kms_ids:
        type: string 
        default: ${SOPS_KMS_IDS}
    steps:
      - attach_to_code_workspace
      - setup_github_access
      - restore_bash_env
      - setup_npm_access:
          npm_registry: << parameters.npm_registry >>
          npm_registry_token: << parameters.npm_registry_token >>
      - download_ci_toolkit:
          ci_toolkit_url: << parameters.ci_toolkit_url >>
      - setup_google_cloud_access:
          target_cluster: << parameters.gcp_target_cluster >>
          credentials: << parameters.gcp_svc_account >>
          project: << parameters.gcp_project >>
          compute_zone: << parameters.gcp_compute_zone >>
      - install_helm:
          sops_kms_ids: << parameters.sops_kms_ids >>
      - deploy_with_script:
          target_namespace: << parameters.target_namespace >>
          working_directory: << parameters.working_directory >>
          post_to_slack: << parameters.post_to_slack >>
          slack_channel_id: << parameters.slack_channel_id >>
